// <auto-generated />
using System;
using Jourlay.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jourlay.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250714092918_editedBaseClass")]
    partial class editedBaseClass
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jourlay.Domain.Entities.ContactUsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("BaseCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("base_created_date");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("FacebookLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("facebook_link");

                    b.Property<string>("InstagramLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("instagram_link");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("TwitterLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("twitter_link");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<string>("YouTubeLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("youtube_link");

                    b.HasKey("Id");

                    b.ToTable("ContactUses");
                });

            modelBuilder.Entity("Jourlay.Domain.Entities.EmailAddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("BaseCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("base_created_date");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<Guid>("OfficeInfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("office_info_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("email_type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OfficeInfoId");

                    b.ToTable("EmailAddressEntity");
                });

            modelBuilder.Entity("Jourlay.Domain.Entities.OfficeInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("BaseCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("base_created_date");

                    b.Property<Guid>("ContactUsId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_us_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpeningHoursWeekday")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("opening_hours_weekday");

                    b.Property<string>("OpeningHoursWeekend")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("opening_hours_weekend");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ContactUsId");

                    b.ToTable("OfficeInfos");
                });

            modelBuilder.Entity("Jourlay.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("BaseCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("base_created_date");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<Guid>("OfficeInfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("office_info_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("phone_type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OfficeInfoId");

                    b.ToTable("PhoneNumberEntity");
                });

            modelBuilder.Entity("Jourlay.Domain.Entities.EmailAddressEntity", b =>
                {
                    b.HasOne("Jourlay.Domain.Entities.OfficeInfoEntity", "OfficeInfo")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("OfficeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeInfo");
                });

            modelBuilder.Entity("Jourlay.Domain.Entities.OfficeInfoEntity", b =>
                {
                    b.HasOne("Jourlay.Domain.Entities.ContactUsEntity", "ContactUs")
                        .WithMany("Offices")
                        .HasForeignKey("ContactUsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUs");
                });

            modelBuilder.Entity("Jourlay.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.HasOne("Jourlay.Domain.Entities.OfficeInfoEntity", "OfficeInfo")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("OfficeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeInfo");
                });

            modelBuilder.Entity("Jourlay.Domain.Entities.ContactUsEntity", b =>
                {
                    b.Navigation("Offices");
                });

            modelBuilder.Entity("Jourlay.Domain.Entities.OfficeInfoEntity", b =>
                {
                    b.Navigation("EmailAddresses");

                    b.Navigation("PhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
